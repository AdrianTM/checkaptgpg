#!/bin/bash

check_exceptions(){
        if [ $(echo $repo|sed 's/ /\n/g'|grep 'www.bchemnet.com_suldr') ];
          then 
            echo -e "*** wget download the suldr.gpg file, install with 'apt-key add' command:\n\n    su -c 'wget -q -O- http://www.bchemnet.com/suldr/suldr.gpg | apt-key add -'\n"
          else
            :   
        fi
        
        if [ $(echo $repo|sed 's/ /\n/g'|grep 'www.daveserver.info_antiX_debs') ];
          then 
            echo -e "*** wget download the key.pub file, install with 'apt-key add' command:\n\n    su -c 'wget -q -O- http://www.daveserver.info/antiX/debs/key.pub | apt-key add -'\n"
          else
            :   
        fi
        
        if [ $(echo $repo|sed 's/ /\n/g'|grep 'deb-multimedia.org') ];
          then 
            echo -e "*** install the deb-multimedia-keyring package:\n\n    su -c 'apt-get install deb-multimedia-keyring'\n"
          else
            :   
        fi
        
        if [ $(echo $repo|sed 's/ /\n/g'|grep 'download.tuxfamily.org') ];
          then 
            echo -e "*** wget download the gericom.asc file, install with 'apt-key add' command:\n\n    su -c 'wget -q -O- http://download.tuxfamily.org/gericom/gericom.asc | apt-key add -'\n"
          else
            :   
        fi        
        
        if [ $(echo $repo|sed 's/ /\n/g'|grep 'dl.google.com_linux') ];
          then 
            echo -e "*** wget download the linux_signing_key.pub file, install with 'apt-key add' command:\n\n    su -c 'wget -q -O- https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -'\n"
          else
            :   
        fi        
        
        if [ $(echo $repo|sed 's/ /\n/g'|grep 'deb.opera.com_') ];
          then 
            echo -e "*** wget download the archive.key file, install with 'apt-key add' command:\n\n    su -c 'wget -q -O- http://deb.opera.com/archive.key | apt-key add -'\n"
          else
            :   
        fi        
        
        if [ $(echo $repo|sed 's/ /\n/g'|grep 'siduction') ];
          then 
            echo -e "*** install the siduction-archive-keyring package:\n\n    su -c 'apt-get install siduction-archive-keyring'\n"
          else
            :   
        fi
        
        if [ $(echo $repo|sed 's/ /\n/g'|grep 'qt-kde.debian.net') ];
          then 
            echo -e "*** install the pkg-kde-archive-keyring package:\n\n    su -c 'apt-get install pkg-kde-archive-keyring'\n"
          else
            :   
        fi
        
        if [ $(echo $repo|sed 's/ /\n/g'|grep 'download.virtualbox.org_virtualbox') ];
          then 
            echo -e "*** wget download the oracle_vbox.asc file:\n\n    su -c 'wget -q -O- http://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc | apt-key add -'\n"
          else
            :   
        fi
} 

# Check for and parse configuration file
CONFFILE=/etc/checkaptgpg.conf
[ -f $CONFFILE ] && . $CONFFILE

# Check for command line options
WAITATEND=0

while [ $# -gt 0 ]; do
    case $1 in
        --cronjob)
            # Run from cronjob
            # Check for CRONJOB_ENABLED which will have been in CONFFILE above.
            if [ "x$CRONJOB_ENABLED" != "xyes" ]; then
                # CRONJOB not enabled, so quit without error.
                exit 0;
            fi
            ;;
        --wait-at-end)
            # Run from menu system, make sure user can see output.
            WAITATEND=1
            ;;
        *)
            # Unknown option - don't print any error message.
            ;;
    esac
    shift
done

# Check if I am root for use later.
if [ $(id -u) -ne 0 ]; then
    ROOT=0
else
    ROOT=1
fi

# Check if we are running BASH for colourisation
if [ $BASH ]; then
    RED='\e[1;31m'
    BLUE='\e[1;34m'
    GREEN='\e[0;32m'
    END='\e[0m'
else
    RED=''
    BLUE=''
    GREEN=''
    END=''
fi

# Will we need to be rerun as root?
RERUN=0

# The location of the trusted keyring.
#APT_TRUSTED=/etc/apt/trusted.gpg

# The location of the Release files.
APT_LISTS=/var/lib/apt/lists

# Get a list of repositories for which we have downloaded a Release file
# include Release files from both /var/lib/apt/lists and /var/lib/apt/lists/partial 
REPOSITORIES="$(ls $APT_LISTS | grep Release$) $(ls $APT_LISTS/partial | grep Release$)"

# Enable the line below to prevent a "No GPG Release signature found." message from being shown for
# 'mepiscr' -- the Mepis Community repos
# REPOSITORIES="$(echo $REPOSITORIES | sed 's/ /\n/g' | grep -v mepiscr)"

# For each repository look for a matching Release.gpg signature
for repo in $REPOSITORIES
do
    echo -e \\nChecking $repo
    RELEASE=''
    if [ -s $APT_LISTS/$repo ]
    then
     RELEASE=$APT_LISTS/$repo
    else
     if [ -s $APT_LISTS/partial/$repo ]
     then
      RELEASE=$APT_LISTS/partial/$repo
     fi
    fi
    GPG=''
    if [ -s $RELEASE.gpg ]
    then
        GPG=$RELEASE.gpg
    else
        if [ -s $APT_LISTS/partial/$repo.gpg ]
        then
            GPG=$APT_LISTS/partial/$repo.gpg
        else
            if [ -s $APT_LISTS/partial/$repo.gpg.reverify ]
            then
                GPG=$APT_LISTS/partial/$repo.gpg.reverify
            fi
        fi
    fi
    if [ ! -z "$GPG"  -o "`ls $RELEASE | grep InRelease`" ]
    then
        # We have found a Release.gpg signature
        ANSWER=`gpgv --ignore-time-conflict $(find /etc/apt/trusted.gpg*|grep gpg$|sed 's/^/ --keyring /') $GPG $RELEASE 2>&1`
        if [ $? -ne 0 ]
        then
            # original code disabled
            #  
            # GPG errored -
            # Assume that an ID was included in the error message in the form
            # ... ID <GPGID> ...
            #IDFOUND=0
            #for xx in $ANSWER
            #do
            #    if [ $IDFOUND -eq 0 ]
            #    then
            #        if [ "ID" = "$xx" ]
            #        then
            #            IDFOUND=1
            #        fi
            #    else
            #        GPGKEY=$xx
            #        break
            #    fi
            #done
            GPGKEY=$(echo $ANSWER |sed 's/ gpgv:/ \ngpgv:/g'|grep 'public key not found\|BAD signature' -B1|grep ID|rev|awk {'print $1'}|rev)
            if [ $ROOT -eq 1 ]; then

               # original code disabled
               #  
               # We are root, so we can try to download the key.
               #if [ !$KEYSERVER ]; then
               #    # Should have been specified in CONFFILE above.
               #    #KEYSERVER=hkp://wwwkeys.eu.pgp.net
               #    KEYSERVER=keys.gnupg.net
               #fi
               #apt-key adv --keyserver $KEYSERVER --recv-key $GPGKEY
               ## Assume it worked.

               # There's a KEYSERVER entry in the CONFFILE but 
               # will ignore it and use the list below instead
  
               KEYSERVER_LIST="\
               keyserver.ubuntu.com
               hkp://pgp.mit.edu
               hkp://subkeys.pgp.net
               pool.sks-keyservers.net
               #eu.pool.sks-keyservers.net
               #hkp://keys.gnupg.net
               #hkp://keyservers.org
               #hkp://keyserver.linux.it"
               # try to download a key from keyserver(s) until
               # successfull or end of list has been reached
               
               #use this method to create keyserver list if method above doesn't work
               #KEYSERVER_LIST=""
               #KEYSERVER_LIST=$KEYSERVER_LIST"hkp://keys.gnupg.net "
               #KEYSERVER_LIST=$KEYSERVER_LIST" keyserver.ubuntu.com"
               #KEYSERVER_LIST=$KEYSERVER_LIST" hkp://pgp.mit.edu"
               #KEYSERVER_LIST=$KEYSERVER_LIST" hkp://subkeys.pgp.net"
               #KEYSERVER_LIST=$KEYSERVER_LIST" pool.sks-keyservers.net"
               #KEYSERVER_LIST=$KEYSERVER_LIST" eu.pool.sks-keyservers.net"
               #KEYSERVER_LIST=$KEYSERVER_LIST" hkp://keys.gnupg.net"
               #KEYSERVER_LIST=$KEYSERVER_LIST" hkp://keyservers.org"
               #KEYSERVER_LIST=$KEYSERVER_LIST" hkp://keyserver.linux.it"
               # try to download a key from keyserver(s) until
               # successfull or end of list has been reached
              
                for KEYSERVER in $(echo $KEYSERVER_LIST|sed 's/ /\n/g'|grep -v ^#)
                  do 
                    #echo $KEYSERVER|grep -q ^#||/usr/bin/time -f'%E' apt-key adv --keyserver $KEYSERVER --recv-key $GPGKEY 1>/dev/null
                    #echo $KEYSERVER|grep -q ^#||apt-key adv --keyserver $KEYSERVER --recv-key $GPGKEY 1>/dev/null;
                    #/usr/bin/time -f'%E' apt-key adv --keyserver $KEYSERVER --recv-key $GPGKEY 1>/dev/null
                    apt-key adv --keyserver $KEYSERVER --recv-key $GPGKEY 1>/dev/null 
                    if [ $? -eq 0 ]; then
                      break      
                    fi
                    echo
                  done
                for i in $(echo $GPGKEY);do apt-key list|grep -q $i 2>/dev/null||echo -e \\n$i" key not found on keyservers"\\n;done
                for i in $(echo $GPGKEY);do apt-key list|grep -q $i 2>/dev/null||check_exceptions;done
                #apt-key list|grep -q $GPGKEY 2>/dev/null||echo -e \\n$GPGKEY" key(s) not found on keyservers"\\n
                #apt-key list|grep -q $GPGKEY 2>/dev/null||check_exceptions $repo

            else
                # We are not root, so output a message.
                printf "    $RED%s$END\n" "Missing GPG ID $GPGKEY."
                RERUN=1
            fi
        else
            printf "    $GREEN%s$END" "Good GPG signature found."
            echo
        fi
    else
        printf "$BLUE%s$END\n" "*** No GPG Release signature found."; echo
        check_exceptions $repo

    fi
done
echo

if [ $RERUN -gt 0 ]; then
    echo
    FixMissingKeysQuery="Y"
    echo "Missing or broken keys detected."
    read -p "Attempt to fix missing/broken keys [Y/n]?  " FixMissingKeysQuery
     if [ "$FixMissingKeysQuery" != "n" ]; then
       su -c 'checkaptgpg'
    fi
fi

if [ $WAITATEND -gt 0 ]; then
    echo
    HelpOrQuit=""
    read -sn 1 -t 999999999 -p "Press 'H' for online help, press any other key to close this window." HelpOrQuit
    sleep .1
    if [ "$HelpOrQuit" = "h" ] || [ "$HelpOrQuit" = "H" ]
      then
        echo
        echo
        echo "Please wait while the link 'http://www.mepiscommunity.org/doc_mx/mxapps.html#check' opens in your browser ..."
        echo
        if [ "$(whoami)" = "root" ]
          then    
            User=$(who | grep '(:0)' -m1 | awk '{print $1}')  
            1>&2 2>/dev/null su - $User -c 'env XAUTHORITY=/$HOME/.Xauthority DISPLAY=:0 1>&2 2>/dev/null xdg-open http://www.mepiscommunity.org/user_manual_mx15/mxum.html#check&'
          else 
            1>&2 2>/dev/null xdg-open http://www.mepiscommunity.org/user_manual_mx15/mxum.html#check&
        fi   
        sleep 2
        read -sn 1 -p "Press any key to close this window." -t 999999999
        sleep .1
      else
        :
    fi
fi
